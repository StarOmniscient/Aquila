generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

// Optional: uncomment if you want type-safe statuses
// enum MediaStatus {
//   PLANNING
//   WATCHING
//   COMPLETED
//   DROPPED
//   PAUSED
// }

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  isActive      Boolean    @default(true)
  role          Role       @default(USER)
  emailVerified Boolean    @default(false)

  email        String   @unique
  passwordHash String

  displayName String?
  userName    String   @unique
  avatarUrl   String?

  AnimeList   AnimeList[]
  BookList    BookList[]
  MovieList   MovieList[]
  TVList      TVList[]
  GameList    GameList[]
  MusicList   MusicList[]
}

model Anime {
  id            String        @id @default(cuid())
  anilistID     String?       @unique
  malID         String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  title         String        @db.Text
  coverUrl      String?
  description   String?       @db.Text
  releaseDate   DateTime?
  status        String?       // e.g., "Airing", "Finished"
  rating        Float?
  aniListRating Float?
  malRating     Float?
  studio        String?
  episodes      Int?

  AnimeList     AnimeList[]
  seasons       AnimeSeason[]
}

model AnimeSeason {
  id      String  @id @default(cuid())
  animeId String
  season  Int
  episodes Int

  anime   Anime   @relation(fields: [animeId], references: [id])

  @@index([animeId])
}

model Book {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.Text
  author      String?
  coverUrl    String?
  description String?  @db.Text
  releaseDate DateTime?
  status      String?  // e.g., "Reading"
  rating      Float?

  BookList    BookList[]
}

model Movie {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.Text
  coverUrl    String?
  description String?  @db.Text
  releaseDate DateTime?
  status      String?
  rating      Float?
  runtime     Int?     // minutes

  MovieList   MovieList[]
}

model TV {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.Text
  coverUrl    String?
  description String?  @db.Text
  releaseDate DateTime?
  status      String?
  rating      Float?
  seasons     Int?
  episodes    Int?

  TVList      TVList[]
}

model Game {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.Text
  coverUrl    String?
  description String?  @db.Text
  releaseDate DateTime?
  status      String?
  rating      Float?
  platform    String?

  GameList    GameList[]
}

model Music {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.Text
  artist      String?
  coverUrl    String?
  releaseDate DateTime?
  status      String?
  rating      Float?

  MusicList   MusicList[]
}

// --- List Models with indexes and unique constraints ---

model AnimeList {
  id       String  @id @default(cuid())
  userId   String
  animeId  String
  progress Int?
  score    Float?
  status   String? // or MediaStatus? if using enum

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  anime Anime @relation(fields: [animeId], references: [id])

  @@unique([userId, animeId])
  @@index([userId])
  @@index([animeId])
}

model BookList {
  id       String  @id @default(cuid())
  userId   String
  bookId   String
  progress Int?
  score    Float?
  status   String?

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
  @@index([userId])
  @@index([bookId])
}

model MovieList {
  id      String  @id @default(cuid())
  userId  String
  movieId String
  score   Float?
  status  String?

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
  @@index([userId])
  @@index([movieId])
}

model TVList {
  id       String  @id @default(cuid())
  userId   String
  tvId     String
  progress Int?
  score    Float?
  status   String?

  user User @relation(fields: [userId], references: [id])
  tv   TV  @relation(fields: [tvId], references: [id])

  @@unique([userId, tvId])
  @@index([userId])
  @@index([tvId])
}

model GameList {
  id       String  @id @default(cuid())
  userId   String
  gameId   String
  progress Int?
  score    Float?
  status   String?

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
}

model MusicList {
  id      String  @id @default(cuid())
  userId  String
  musicId String
  score   Float?
  status  String?

  user  User  @relation(fields: [userId], references: [id])
  music Music @relation(fields: [musicId], references: [id])

  @@unique([userId, musicId])
  @@index([userId])
  @@index([musicId])
}